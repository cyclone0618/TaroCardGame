Player = {}

--初始化
function Player:init()
    self:setConnected(false, false)
    self:setReady(false, false)
end

function Player:getIndex()
    for index, player in ipairs(self.server.players) do
        if player == self then
            return index
        end
    end
end

function Player:setConnected(connected, notify)
    self.connected = connected
    if notify then
        self.server:onPlayerConnected(self, connected)
    end
end

function Player:setReady(ready, notify)
    self.ready = ready
    if notify then
        self.server:onPlayerReady(self, ready)
    end
end

function Player:done(checkFunc)
    self.isDone = true
    checkFunc()
end

function Player:reset_done()
    self.isDone = false
end

--准备阶段，有玩家连接时
function Player:onPlayerConnected(player, connected)
end

--准备阶段，有玩家准备时
function Player:onPlayerReady(player, ready)
end

--结束准备阶段
function Player:endReadyState()
end

--开始发牌阶段
function Player:startDealState()
end

--发牌阶段，发牌前
function Player:beforeDeal(deck)
    --创建手牌
    self.hands = {}
    self.handNum = 18
end

--发牌阶段，发牌中
function Player:onDeal(deck)
    --填充牌数直到手牌填满或者牌库为空
    while #self.hands < self.handNum and #deck > 0 do
        local index = math.random(1, #deck)
        local poke = deck[index]
        table.insert(self.hands, poke)
        table.remove(deck, index)
    end

    --手牌排序
    Poke.SortCard(self.hands)

    --打印手牌
    Poke.PrintCards(self.hands, '玩家'..self:getIndex()..'手牌')
end

--发牌阶段，发牌后
function Player:afterDeal(deck)
end

function Player:startPlayCardState()
end

--出牌决策
function Player:makePlayCardDecision(callback)
end

--每当有玩家做出决策后
function Player:notifyPlayCardAction()
end

--进入结算阶段
function Player:startSettleState()
end

--从手牌到场上
function Player:moveHandsToBoard(cards)
    Poke.RemoveCards(self.hands, cards)
    self.board = cards
end

function Player:createPlayer(server)
    local player = setmetatable({}, {__index = self} )
    player.server = server
    player:init()
    return player
end

--重新进入准备阶段
function Player:restartReadyState()
end