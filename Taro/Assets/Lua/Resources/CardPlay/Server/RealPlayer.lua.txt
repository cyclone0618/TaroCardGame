require('CardPlay.Server.Player')
require('CardPlay.Server.PlayerClientBridge')
local coroutineRunner = require('CardPlay.Common.CoroutineRunner')

RealPlayer = setmetatable({}, { __index = Player })

function RealPlayer:createPlayer(server)
    local player = setmetatable(Player:createPlayer(server), {__index = self} )
    player.base = Player
    return player
end

function RealPlayer:onPlayerConnected(player, connected)
    if self.bridge ~= nil then
        self.bridge:S2C_onPlayerConnected(player, connected)
    end
end

function RealPlayer:onPlayerReady(player, ready)
    if self.bridge ~= nil then
        self.bridge:S2C_onPlayerReady(player, ready)
    end
end

--绑定Client，并返回一个Bridge对象用于桥接
function RealPlayer:bindClient(client)
    self.client = client
    self.bridge = Bridge:New(client, self)
    self:setConnected(true)
    return self.bridge
end

function RealPlayer:endReadyState()
    self.base.endReadyState(self)
    self.bridge:S2C_endReadyState()
end

function RealPlayer:startDealState()
    self.base.startDealState(self)
    self.bridge:S2C_startDealState()
end

function RealPlayer:afterDeal(deck)
    self.base.afterDeal(self, deck)
    self.bridge:S2C_afterDeal_DealState()
end

function RealPlayer:Done_DealState()
    self:done(function ()
        self.server:checkIfCompleteDealState()
    end)
end

function RealPlayer:startPlayCardState()
    self.bridge:S2C_startPlayCardState_PlayCardState()
end

function RealPlayer:notifyPlayCardAction()
    self.bridge:S2C_notifyPlayCardAction_PlayCardState()
end

function RealPlayer:makePlayCardDecision(callback)
    self.bridge:S2C_makePlayCardDecision_PlayCardState(callback)
end

-- function RealPlayer:makePlayCardDecision(callback)
--     coroutineRunner.start(function()
--         --延迟一点时间再出牌
--         coroutine.yield(CS.UnityEngine.WaitForSeconds(1))
--         local lastKindAndFirgure = nil
--         local lastPlayCard = self.server.lastPlayCards
--         if lastPlayCard ~= nil and #lastPlayCard > 0 then
--             local r, kind, figure = Poke.judgeCardsKind(lastPlayCard)
--             if r then
--                 lastKindAndFirgure = { kind = kind, figure = figure }
--             end
--         end
--         --找出所有可能的组合
--         local possibleCards = Poke.GetAllCardsBiggerThan(self.hands, lastKindAndFirgure)

--         if #possibleCards > 0 then
--             --出牌
--             callback(1, possibleCards[1])
--         else
--             --弃权
--             callback(0, nil)
--         end
--     end)
-- end

--进入结算阶段
function RealPlayer:startSettleState()
    self.base.startSettleState(self)
    self.bridge:S2C_startSettleState()
end

--结束结算阶段
function RealPlayer:completeSettleState()
    self:done(function ()
        self.server:checkIfCompleteSettleState()
    end)
end

--重新进入结算阶段
function RealPlayer:restartReadyState()
    self.base.restartReadyState(self)
    self.bridge:S2C_restartReadyState()
end