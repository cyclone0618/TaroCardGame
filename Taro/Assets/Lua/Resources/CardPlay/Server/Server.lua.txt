local state = require('CardPlay.Common.State')
require('CardPlay.Common.Poke')
require('CardPlay.Server.AIPlayer')
require('CardPlay.Server.RealPlayer')
local Deck = require('CardPlay.Common.Deck')

--首先，生成一个服务端对象
Server = {
    state = State.ready,
    readyStep = ReadyStep.disconnect,
    chooseTaroStep = ChooseTaroStep.noSelect,
    dealStep = DealStep.beforeDeal,
    playCardStep = PlayCardStep.Player1Turn,
}

--客户端链接服务端
function Server:connectClient(client)
    local realPlayer = self.players[1]
    if realPlayer.client ~= nil then
        error("there're already a connected player existed.")
    else
        return realPlayer:bindClient(client)
    end
end

--玩家连接状态改变时
function Server:onPlayerConnected(player, connected)
    if self.players ~= nil then
        for i, p in ipairs(self.players) do
            p:onPlayerConnected(player, connected)
        end
    end
end

--玩家准备状态改变时
function Server:onPlayerReady(player, ready)
    if self.players ~= nil then
        local isAllReady = true
        for i, p in ipairs(self.players) do
            p:onPlayerReady(player, ready)
            if not p.ready then
                isAllReady = false
            end
        end

        if isAllReady then
            for index, p in ipairs(self.players) do
                p:endReadyState()
            end
            self:enterChooseTaroState()
        end
    end
end

--进入选择塔罗牌的阶段
function Server:enterChooseTaroState()
    self.state = State.chooseTaro

    --暂时跳过选塔罗阶段
    self:enterDealState()
end

local deck = {}

function Server:enterDealState()
    self.state = State.deal
    self.dealStep = DealStep.beforeDeal

    --开始发牌阶段
    for index, player in ipairs(self.players) do
        player:startDealState()
    end

    --创建一副扑克牌，然后每个玩家随机发18张牌
    deck = Deck:create()

    --发牌前
    for index, player in ipairs(self.players) do
        player:beforeDeal(deck)
    end

    --发牌中
    for index, player in ipairs(self.players) do
        player:onDeal(deck)
    end

    --发牌后
    for index, player in ipairs(self.players) do
        player:afterDeal(deck)
    end
end

function Server:checkIfDone(doneFunc)
    local isAllDone = true
    for index, player in ipairs(self.players) do
        if player.done ~= true then
            isAllDone = false
        end
    end

    if isAllDone then
        for index, player in ipairs(self.players) do
            player:reset_done()
        end

        doneFunc()
    end
end

function Server:forEachPlayer(func)
    for index, player in ipairs(self.players) do
        func(index, player)
    end
end

function Server:checkIfCompleteDealState()
    self:checkIfDone(function ()
       self:enterPlayCardState()
    end)
end

function Server:enterPlayCardState()
    self.state = State.playCard
    print('进入打牌阶段')

    --先决定谁的回合
    self.currentTurn = math.random(1, #self.players)

    self:forEachPlayer(function (index, player)
        player:startPlayCardState()
    end)
end

--创建三个玩家(1个真实玩家和2个AI玩家)
Server.players = {
    RealPlayer:createPlayer(Server),
    AIPlayer:createPlayer(Server),
    AIPlayer:createPlayer(Server),
}

math.randomseed(os.time())
for i = 1, 50, 1 do --先清理掉前面几个随机值
    math.random()
end

return Server