require('CardPlay.Client.PokeObjSet')
require('CardPlay.Client.Button')
require('CardPlay.Client.WinnerDialog')

PlayCardPanel = {}

local canvas = assert(CS.UnityEngine.GameObject.Find("Canvas"))
local myHandSet = PokeObjSet:New(assert(CS.UnityEngine.GameObject.Find("MyHand")))
local upstreamBoardSet = PokeObjSet:New(assert(CS.UnityEngine.GameObject.Find("Opponent1Board")))
local downstreamBoardSet = PokeObjSet:New(assert(CS.UnityEngine.GameObject.Find("Opponent2Board")))
local myBoardSet = PokeObjSet:New(assert(CS.UnityEngine.GameObject.Find("MyBoard")))
local playCardBtn = Button:New(assert(canvas.transform:Find("PlayCardButton").gameObject))
local giveUpBtn = Button:New(assert(canvas.transform:Find("GiveUpButton").gameObject))
local myGiveUp = assert(canvas.transform:Find("MyGiveUp").gameObject)
local upstreamGiveUp = assert(canvas.transform:Find("UpstreamGiveUp").gameObject)
local downstreamGiveUp = assert(canvas.transform:Find("DownstreamGiveUp").gameObject)
local winnerDialog = WinnerDialog:New(assert(canvas.transform:Find("WinnerDialog").gameObject))

PlayInfoArea = {}

function PlayInfoArea:Create(areaName)
    local ui = setmetatable({}, { __index = self })
    ui.area = assert(canvas.transform:Find(areaName).gameObject)
    ui.playerNameTxt = assert(ui.area.transform:Find("PlayerNameTxt").gameObject:GetComponent(typeof(CS.UnityEngine.UI.Text)))
    ui.handsNumTxt = assert(ui.area.transform:Find("HandsNumTxt").gameObject:GetComponent(typeof(CS.UnityEngine.UI.Text)))
    ui.turnMark = assert(ui.area.transform:Find("TurnMark").gameObject)
    return ui
end

function PlayInfoArea:Show(playerName, handsNum)
    self.area:SetActive(true)
    self.playerNameTxt.text = playerName
    self.turnMark:SetActive(false)
    self:UpdateHandsNum(handsNum)
end

function PlayInfoArea:Hide()
    self.area:SetActive(false)
end

function PlayInfoArea:SetData(info)
    self:UpdateHandsNum(info.handNum)
    self.turnMark:SetActive(info.isTurnPlayer == true)
end

function PlayInfoArea:UpdateHandsNum(handsNum)
    self.handsNumTxt.text = "手牌数量：" .. handsNum
end

local upPlayInfoArea = PlayInfoArea:Create("UpstreamPlayInfo")
local downPlayInfoArea = PlayInfoArea:Create("DownstreamPlayInfo")
local myPlayInfoArea = PlayInfoArea:Create("MyPlayInfo")

function PlayCardPanel:Show()
    upPlayInfoArea:Show("上游玩家", 0)
    downPlayInfoArea:Show("下游玩家", 0)
    myPlayInfoArea:Show("我方玩家", 0)
end

function PlayCardPanel:SetData_AfterDeal(data)
    upPlayInfoArea:SetData(data.upstreamInfo)
    downPlayInfoArea:SetData(data.downstreamInfo)
    myPlayInfoArea:SetData(data.meInfo)

    local myHands = data.meInfo.hands
    myHandSet:SetData(myHands)
end

function PlayCardPanel:SetData_StartPlayCard(data)
    playCardBtn:Show()
    giveUpBtn:Show()
    self:SetData_PlayCardAction(data)
end

function PlayCardPanel:SetData_PlayCardAction(data)
    upPlayInfoArea:SetData(data.upstreamInfo)
    downPlayInfoArea:SetData(data.downstreamInfo)
    myPlayInfoArea:SetData(data.meInfo)

    local myHands = data.meInfo.hands
    local myBoard = data.meInfo.board
    local upstreamBoard = data.upstreamInfo.board
    local downstreamBoard = data.downstreamInfo.board
    myHandSet:SetData(myHands)
    myBoardSet:SetData(myBoard)
    upstreamBoardSet:SetData(upstreamBoard)
    downstreamBoardSet:SetData(downstreamBoard)
    myGiveUp:SetActive(data.meInfo.giveUp)
    upstreamGiveUp:SetActive(data.upstreamInfo.giveUp)
    downstreamGiveUp:SetActive(data.downstreamInfo.giveUp)

    playCardBtn:SetEnable(false)
    giveUpBtn:SetEnable(false)
    self.lastPlayCards = data.lastPlayCards
    self.enablePlayCard = false
    self.couldGiveUp = data.couldGiveUp
end

function PlayCardPanel:SetData_SettleState(data, client)
    playCardBtn:Hide()
    giveUpBtn:Hide()
    self:SetData_PlayCardAction(data)

    local winnerInfo = ""
    if data.meInfo.isWinner then
        winnerInfo = "胜者是我方玩家"
    elseif data.upstreamInfo.isWinner then
        winnerInfo = "胜者是上游玩家"
    elseif data.downstreamInfo.isWinner then
        winnerInfo = "胜者是下游玩家"
    end
    winnerDialog:Show(winnerInfo, function()
        winnerDialog:Hide()
        client.bridge:C2S_OnWinnerDialogBtnClick()
    end)
end

function PlayCardPanel:EnableUIForMakeDesicion(client)
    self.enablePlayCard = true
    self:CheckPlayCardBtn()
    giveUpBtn:SetEnable(self.couldGiveUp)
    playCardBtn:SetClickFunction(function ()
        client.bridge:C2S_MakeDecision_PlayCardState(1, myHandSet.selected)
        myHandSet:CleanSelected()
    end)
    giveUpBtn:SetClickFunction(function ()
        client.bridge:C2S_MakeDecision_PlayCardState(0)
    end)
end

function PlayCardPanel:CheckPlayCardBtn()
    local cards = myHandSet.selected
    local enablePlayCard = false
    if self.enablePlayCard then
        local result, kind, figure = Poke.judgeCardsKind(cards)
        if result then
            if self.lastPlayCards ~= nil then
                local result2, kind2, figure2 = Poke.judgeCardsKind(self.lastPlayCards)
                if result2 then
                    local judgeResult = Poke.JudgeIfBiggerThan({ kind = kind, figure = figure },
                        { kind = kind2, figure = figure2 })
                    enablePlayCard = judgeResult
                else
                    enablePlayCard = true
                end
            else
                enablePlayCard = true
            end
        end
    end

    playCardBtn:SetEnable(enablePlayCard)
end

function PlayCardPanel:ClickPokeObj(obj)
    myHandSet:ClickObj(obj)
    self:CheckPlayCardBtn()
end

function PlayCardPanel:Hide()
    myHandSet:Clean()
    myBoardSet:Clean()
    upstreamBoardSet:Clean()
    downstreamBoardSet:Clean()
    myGiveUp:SetActive(false)
    upstreamGiveUp:SetActive(false)
    downstreamGiveUp:SetActive(false)
    upPlayInfoArea:Hide()
    downPlayInfoArea:Hide()
    myPlayInfoArea:Hide()
end

function PlayCardPanel:OnDispose()
    winnerDialog:OnDispose()
    playCardBtn:OnDispose()
    giveUpBtn:OnDispose()
end
