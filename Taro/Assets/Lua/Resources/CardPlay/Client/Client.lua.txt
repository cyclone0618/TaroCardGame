require('CardPlay.Common.Poke')
local server = require('CardPlay.Server.Server')
require('CardPlay.Common.State')
require('CardPlay.Client.ReadyPanel')
require('CardPlay.Client.PlayCardPanel')

local Client = {}
local bridge = {}

function Client:UpdateUI_ReadyState(data)
    ReadyPanel:UpdateUI_ReadyState(self, data)
end

function Client:endReadyState()
    ReadyPanel:EndReadyState()
end

function Client:startDealState()
    Client.state = State.deal
end

function Client:afterDeal_DealState(data)
    PlayCardPanel:Show()
    PlayCardPanel:SetData_AfterDeal(data)
    bridge:C2S_Done_DealState()
end

function Client:startPlayCardState_PlayCardState(data)
    PlayCardPanel:SetData_StartPlayCard(data)
end

function Client:notifyPlayCardAction_PlayCardState(data)
    PlayCardPanel:SetData_PlayCardAction(data)
end

function Client:makePlayCardDecision_PlayCardState()
    PlayCardPanel:EnableUIForMakeDesicion()
end

function Client:startSettleState(data)
    PlayCardPanel:SetData_SettleState(data, self)
end

function Client:restartReadyState(data)
    PlayCardPanel:Hide()
    ReadyPanel:UpdateUI_ReadyState(self, data)
end

--绑定服务端，如果成功，会返回一个桥接对象
Client.state = State.ready
bridge = server:connectClient(Client)
Client.bridge = bridge
bridge:C2S_RequestData_ReadyState()

function OnDispose()
    ReadyPanel:OnDipose()
    PlayCardPanel:OnDispose()
end